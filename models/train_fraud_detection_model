import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from imblearn.over_sampling import SMOTE
import joblib

# Step 1: Simulate a dataset with 1000 transactions
n_samples = 1000
np.random.seed(42)

data = {
    'transaction_id': np.arange(n_samples),
    'customer_id': np.random.randint(1, 100, size=n_samples),
    'transaction_amount': np.random.uniform(10, 1000, size=n_samples),
    'transaction_date': pd.date_range(start='2023-01-01', periods=n_samples, freq='D'),
    'fraud_label': np.random.binomial(1, 0.05, size=n_samples)  # 5% fraud transactions
}

# Create a DataFrame
df = pd.DataFrame(data)

# Step 2: Perform feature engineering
def feature_engineering(df):
    df['total_customer_spent'] = df.groupby('customer_id')['transaction_amount'].transform('sum')
    df['total_customer_orders'] = df.groupby('customer_id')['transaction_id'].transform('count')
    df['avg_transaction_amount'] = df['total_customer_spent'] / df['total_customer_orders']
    df['order_frequency'] = df.groupby('customer_id')['transaction_date'].transform(lambda x: (x.max() - x.min()).days)
    return df

df = feature_engineering(df)

# Step 3: Define features and target
features = ['total_customer_spent', 'total_customer_orders', 'avg_transaction_amount', 'order_frequency', 'transaction_amount']
X = df[features]
y = df['fraud_label']

# Step 4: Handle class imbalance using SMOTE
smote = SMOTE(random_state=42)
X_res, y_res = smote.fit_resample(X, y)

# Step 5: Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.3, random_state=42)

# Step 6: Train the Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 7: Evaluate the model
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# Step 8: Save the trained model to a file
joblib.dump(model, 'fraud_detection_model.pkl')
